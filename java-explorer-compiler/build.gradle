plugins {
    id 'org.springframework.boot' version '2.5.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'org.javaexplorer'
version = '1.0.0'
sourceCompatibility = '8'

ext{
    dockerFiles = ["openjdk8", "openjdk11"]
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

bootJar {
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

dependencies {

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'

    testAnnotationProcessor 'org.projectlombok:lombok'
    implementation 'org.apache.commons:commons-exec:1.3'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'commons-codec:commons-codec:1.15'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation project(':java-explorer-core')
}

test {
    useJUnitPlatform()
}
task releaseDockerImage(dependsOn: bootJar) {
    group 'release'
    doLast{
        for(dockerFile in dockerFiles){
            exec {
                workingDir "$project.projectDir"
                commandLine 'docker', 'build', "-t", "bonede/$project.name:$dockerFile", "-f", "docker/${dockerFile}/Dockerfile", "."
            }
            println "  Docker image building finished: $dockerFile"
        }
    }
}
